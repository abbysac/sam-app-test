AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Metadata:
  AWS::ServerlessRepo::Application:
    Name: aws-serverless-codepipeline-serverlessrepo-publish
    Description: >-
      This serverless application publishes applications to AWS Serverless Application Repository. This app creates
      a Lambda function that a user could then use as an Invoke action target in their CodePipeline.
    Author: AWS Serverless Application Repository
    Labels: [serverless, codepipeline, serverlessrepo]
    HomePageUrl: https://github.com/abbysac/sam-pipeline-project.git
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/abbysac/sam-pipeline-project.git/tree/1.0.1

Parameters:
  Description:
    Type: String
    Description: Update the comment related to release
    Default: "Initiate Comment Here"
  Environment:
    Type: String
    Description: EnvironmentName
    Default: "Devops"
  LogLevel:
    Type: String
    Description: Log level for Lambda function logging, e.g., ERROR, INFO, DEBUG, etc
    Default: INFO
  apiGatewayName:
    Type: String
    Default: lambda-api-test
  apiGatewayStageName:
    Type: String
    Description: test
#    AllowedPattern: '[a-z0-9]+'
    Default: test
  apiGatewayHTTPMethod:
    Type: String
    Default: GET
  


Resources:
  apiLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: lambda-api-test
      VersionDescription: !Ref Description
      CodeUri: ../../lambda-api-test/
      Handler: handler.publish
      Runtime: python3.7
      Tracing: Active
      MemorySize: 256
      Timeout: 900
      Tracing: Active
      
      Role: "arn:aws:iam::224761220970:role/lambda-role"
  AdminApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: EFT  api gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName
      

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - adminuiapiauthLambdaArn: !GetAtt apiLambda.Arn
      ResourceId: !GetAtt AdminApi.RootResourceId
      RestApiId: !Ref AdminApi
    
  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref AdminApi
      StageName: !Ref apiGatewayStageName


  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt apiLambda.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AdminApi}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/invocations

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${adminuiapiauthLambda}:*
          PolicyName: lambda
  
  
Outputs:
  adminuiapiauthLambdaFunctionName:
    Description: Name of adminuiapiauthLambda lambda function
    Value: !Ref apiLambda
  adminuiapiauthLambdaFunctionArn:
    Description: ARN of apiLambda lambda function
    Value: !GetAtt apiLambda.Arn
  apiGatewayInvokeURL:
      Value: !Sub https://${AdminApi}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}